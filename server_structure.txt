[DIRECTORY TREE]
+-- Program.cs
+-- Server.Blockchain.cs
+-- Server.Manager.cs
+-- Server.Node.cs
+-- Server.Node.Networking.cs



[FILE CONTENTS]
=== FILE: Program.cs ===
using Newtonsoft.Json;
using System.Net;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;

namespace server
{
    internal class Program
    {
        static void Main(string[] args)
        {
            ServerManager manager = new(5000);
            manager.Start();

            StartNode("127.0.0.1",
                      6000,
                      new Tuple<IPAddress, ushort>(IPAddress.Parse("127.0.0.1"), 5000));
            StartNode("127.0.0.1",
                      6001,
                      new Tuple<IPAddress, ushort>(IPAddress.Parse("127.0.0.1"), 5000));
            StartNode("127.0.0.1",
                      6002,
                      new Tuple<IPAddress, ushort>(IPAddress.Parse("127.0.0.1"), 5000));
            
            Console.ForegroundColor = ConsoleColor.DarkBlue;
            Console.WriteLine("""
                              ███████████████████████████████████████████████████
                              █Система запущена. Нажмите Enter для завершения...█
                              ███████████████████████████████████████████████████
                              """);
            Console.ResetColor();
            Console.ReadLine();
        }
        static void StartNode(string ipAddress, int port, Tuple<IPAddress, ushort> manager)
        {
            Task.Run(() =>
            {
                Node node = new Node(ipAddress, (ushort)port);
                node.Start(manager);
                //Console.WriteLine($"Узел запущен на {ipAddress}:{port}");
            });
        }
    }
}

---

=== FILE: Server.Blockchain.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace server
{
    internal class Blockchain
    {
        //not implemented yet
        private class Block
        {

        }

        public void ExportToFile(string filename)
        {
            throw new NotImplementedException();
        }
        public void ImportFromFile(string filename)
        {
            throw new NotImplementedException();
        }
        public bool CheckIntegrity(Blockchain blockchain)
        {
            throw new NotImplementedException();
        }
    }
}

---

=== FILE: Server.Manager.cs ===
using Newtonsoft.Json;
using System;
using System.Net;
using System.Net.Sockets;
using System.Security.Cryptography;
using System.Text;
using static user.Data;

namespace server
{
    internal class ServerManager
    {
        private TcpListener listener;
        private List<Node.NodeInfo> nodes;
        private readonly object nodeLock;
        private Dictionary<string /* data hash */, byte[] /* nodes where information about data is located */> dataLocations;
        public ServerManager(int port)
        {
            listener = new(IPAddress.Any, port);
            nodes = new();
            dataLocations = new();
            nodeLock = new();
        }

        #region networking
        public void Start()
        {
            listener.Start();
            Console.WriteLine($"Server is running on {listener.Server.LocalEndPoint.ToString()}");
            Task.Run(() => ListenForConnections());
        }
        private async Task ListenForConnections()
        {
            while (true)
            {
                TcpClient client = await listener.AcceptTcpClientAsync();
                _ = Task.Run(() => HandleConnections(client));
            }
        }
        private void HandleConnections(TcpClient client)
        {
            var settings = new JsonSerializerSettings();
            settings.Converters.Add(new IPAddressConverter());

            try 
            {
                using NetworkStream stream = client.GetStream();
                byte[] header = new byte[16];
                stream.ReadExactly(header, 0, 16);

                user.Data.Request request = user.Data.Request.FromByteArray(header);

                request.data = new byte[request.size];

                stream.ReadExactly(request.data);

                string command = Encoding.UTF8.GetString(request.type)
                    .TrimEnd(' ');

                switch (command)
                {
                    case "REGISTER":
                        if (request.data.Length > 0)
                        {
                            string json = Encoding.UTF8.GetString(request.data);
                            Node.NodeInfo nodeInfo = JsonConvert.DeserializeObject<Node.NodeInfo>(json, settings);
                            RegisterNode(nodeInfo);
                        }
                        break;

                    case "GETNODES":
                        if (request.data.Length >= 4)
                        {
                            int count = BitConverter.ToInt32(request.data, 0);
                            SendNodesToClient(stream, count);
                        }
                        break;
                    case "ALLNODES":
                        if (request.data.Length >= 4)
                        {
                            int count = BitConverter.ToInt32(request.data, 0);
                            SendALLNodesToClient(stream, count);
                        }
                        break;
                    case "UPDATE":
                        if (request.data.Length > 0)
                        {
                            string json = Encoding.UTF8.GetString(request.data);
                            Node.NodeInfo nodeInfo = JsonConvert.DeserializeObject<Node.NodeInfo>(json, settings);
                            UpdateNode(nodeInfo);
                        }
                        break;
                    case "GET":
                        stream.Write(new user.Data.Request("NODES", dataLocations[Convert.ToBase64String(request.data)]).ToByteArray());
                        break;
                    case "LOCATION":
                        UpdateLocations(request.data, stream);
                        break;
                    default:
                        stream.Write(new user.Data.Request("ERROR", Encoding.UTF8.GetBytes("Unknown command"))
                                        .ToByteArray());
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling client: {ex.Message}");
            }
            finally
            {
                client.Close();
            }
        }
        private void SendALLNodesToClient(NetworkStream stream, int count)
        {
            string json = Newtonsoft.Json.JsonConvert.SerializeObject(nodes.Select(n => new Tuple<string, ushort>(n.IP.ToString(), n.Port)));
            byte[] response = Encoding.UTF8.GetBytes(json);

            stream.Write(new user.Data.Request("NODES", response).ToByteArray());
        }
        private void SendNodesToClient(NetworkStream stream, int count)
        {
            List<Tuple<IPAddress, ushort>> selectedNodes;
            try
            {
                lock (nodeLock)
                {
                    selectedNodes = SelectOptimalNodes(
                        nodes
                        .Where(n => (DateTime.UtcNow - n.LastActive).TotalSeconds < 30)
                        .ToList(), count
                        );
                }
                
                string json = Newtonsoft.Json.JsonConvert.SerializeObject(selectedNodes.Select(n => new Tuple<string, ushort>(n.Item1.ToString(), n.Item2)));
                
                byte[] response = Encoding.UTF8.GetBytes(json);
                stream.Write(new user.Data.Request("NODES", response).ToByteArray());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending nodes: {ex.Message}");
            }
        }
        #endregion
        #region work with nodes (field)
        private void UpdateNode(Node.NodeInfo nodeInfo)
        {
            lock (nodeLock)
            {
                Console.WriteLine($"Node {nodeInfo.NodeID} updated"); //!!! ONLY for debug !!!
                var existing = nodes.FirstOrDefault(n => n.NodeID == nodeInfo.NodeID);
                if (existing != null)
                    existing.LastActive = DateTime.UtcNow;
            }
        }
        private void RegisterNode(Node.NodeInfo nodeInfo)
        {
            if (!nodes.Any(n => n.NodeID == nodeInfo.NodeID))
            {
                lock (nodeLock)
                {
                    nodes.Add(nodeInfo);
                }
                Console.WriteLine($"Node {nodeInfo.NodeID} added");
            }
        }
        private List<Tuple<IPAddress, ushort>> SelectOptimalNodes(List<Node.NodeInfo> activeNodes, int count)
        {
            var random = new Random();
            return activeNodes
                .OrderBy(_ => random.Next())
                .Take(count)
                .Select(n => new Tuple<IPAddress, ushort>(n.IP, n.Port))
                .ToList();
        }




        #endregion
        private void UpdateLocations(byte[] data, NetworkStream stream)
        {
            if (data.Length < SHA256.HashSizeInBytes)
            {
                throw new ArgumentException("Invalid data format");
            }
            byte[] hash = new byte[SHA256.HashSizeInBytes];
            Buffer.BlockCopy(data, 0, hash, 0, hash.Length);
            var nodeInfo = data.Skip(hash.Length).ToArray();

            bool added = dataLocations.TryAdd(Convert.ToBase64String(hash), nodeInfo);

            stream.Write(new Request(added ? "SUCCESS" : "ERROR", null).ToByteArray());
        }
    }
}

---

=== FILE: Server.Node.cs ===
using System.Net;

namespace server
{
    internal partial class Node
    {
        public NodeInfo nodeInfo;
        private Storage storage;
        public Node(string ipAddress, ushort port)
        {
            nodeInfo = new();
            nodeInfo.NodeID = Guid.NewGuid();
            nodeInfo.IP = IPAddress.Parse(ipAddress);
            nodeInfo.Port = port;
            nodeInfo.LastActive = DateTime.UtcNow;
            storage = new();
        }
    }
    #region NodeInfo
    internal partial class Node
    {
        public class NodeInfo
        {
            public Guid NodeID { get; set; }
            public IPAddress IP { get; set; }
            public ushort Port { get; set; }
            public DateTime LastActive { get; set; }
        }
    }
    #endregion
    #region Storage
    internal partial class Node
    {
        class Storage
        {
            private Dictionary<string /*hash*/, byte[]/*data*/> data = new();

            public void Add(byte[] dataPart)
            {
                string hashKey = Convert.ToBase64String(user.Data.ComputeHash(dataPart));
                if (!data.ContainsKey(hashKey))
                {
                    data.Add(hashKey, dataPart);
                }
            }
            public byte[] Get(byte[] partHash)
            {
                return data.TryGetValue(
                    Convert.ToBase64String(partHash), out var d) ? d : null;
            }
            public bool Delete(byte[] partHash)
            {
                return data.Remove(Convert.ToBase64String(partHash));
            }
        }
    }
    #endregion
}

---

=== FILE: Server.Node.Networking.cs ===
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using static user.Data;

namespace server
{
    internal partial class Node
    {
        private TcpListener listener;

        public void Start(Tuple<IPAddress, ushort> manager)
        {
            Console.WriteLine($"Node {nodeInfo.NodeID} is running on {nodeInfo.IP}:{nodeInfo.Port}");
            listener = new(nodeInfo.IP, nodeInfo.Port);
            RegisterNodeWithServer(manager);

            listener.Start();
            Task.Run(() => ListenForDataConnections());
            Task.Run(() => SendUpdates(manager));
        }
        private async Task ListenForDataConnections()
        {
            while (true)
            {
                var client = await listener.AcceptTcpClientAsync();
                _ = Task.Run(() => HandleDataClient(client));
            }
        }
        private void HandleDataClient(TcpClient client)
        {
            try
            {
                using NetworkStream stream = client.GetStream();
                byte[] header = new byte[16];
                stream.ReadExactly(header, 0, 16);

                user.Data.Request request = user.Data.Request.FromByteArray(header);

                request.data = new byte[request.size];

                stream.ReadExactly(request.data);

                string command = Encoding.UTF8.GetString(request.type)
                    .TrimEnd(' ');

                switch (command)
                {
                    case "PUT":
                        PutData(stream, request.data);
                        break;
                    case "GET":
                        GetData(stream, request.data);
                        break;
                    case "DELETE":
                        DeleteData(stream, request.data);
                        break;
                    default:
                        stream.Write(new user.Data.Request("ERROR", Encoding.UTF8.GetBytes("Unknown command\n"))
                            .ToByteArray());
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling client: {ex.Message}");
            }
            finally
            {
                client.Close();
            }
        }
        private void PutData(NetworkStream stream, byte[] data)
        {
            try
            {
                storage.Add(data);
                stream.Write(new user.Data.Request("SUCCESS", null)
                                .ToByteArray());
            }
            catch (Exception ex)
            {
                PrintError(stream, ex);
            }
        }
        private void GetData(NetworkStream stream, byte[] hash)
        {
            try
            {
                stream.Write(new user.Data.Request("DATA", storage.Get(hash))
                                .ToByteArray());
            }
            catch (Exception ex)
            {
                PrintError(stream, ex);
            }
        }
        private void DeleteData(NetworkStream stream, byte[] hash)
        {
            try
            {
                storage.Delete(hash);
                stream.Write(new user.Data.Request("SUCCESS", null)
                                .ToByteArray());
            }
            catch (Exception ex)
            {
                PrintError(stream, ex);
            }
        }
        private void RegisterNodeWithServer(Tuple<IPAddress, ushort> manager)
        {
            var settings = new JsonSerializerSettings();
            settings.Converters.Add(new user.Data.IPAddressConverter());

            using TcpClient client = new();
            client.Connect(manager.Item1, manager.Item2);

            using NetworkStream stream = client.GetStream();
            
            var nodeJson = JsonConvert.SerializeObject(nodeInfo, settings);
            var request = new user.Data.Request("REGISTER", Encoding.UTF8.GetBytes(nodeJson));

            stream.Write(request.ToByteArray());
        }
        private async Task SendUpdates(Tuple<IPAddress, ushort> manager)
        {
            var settings = new JsonSerializerSettings();
            settings.Converters.Add(new IPAddressConverter());
            while (true)
            {
                await Task.Delay(TimeSpan.FromSeconds(15));
                
                try
                {
                    nodeInfo.LastActive = DateTime.UtcNow;

                    string json = JsonConvert.SerializeObject(nodeInfo, settings);
                    byte[] data = Encoding.UTF8.GetBytes(json);

                    using var client = new TcpClient();
                    await client.ConnectAsync(manager.Item1, manager.Item2);
                    using var stream = client.GetStream();

                    var request = new Request("UPDATE", data);
                    var requestBytes = request.ToByteArray();
                    //Console.WriteLine("Sending UPDATE request");
                    await stream.WriteAsync(requestBytes, 0, requestBytes.Length);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Ошибка отправки UPDATE: {ex.Message}");
                }
            }
        }
        private static void PrintError(NetworkStream stream, Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            stream.Write(new Request("ERROR", Encoding.UTF8.GetBytes(ex.Message)).ToByteArray());
        }
    }
}

---

