[DIRECTORY TREE]
+-- Program.cs
+-- Server.Blockchain.cs
+-- Server.Manager.cs
+-- Server.Node.cs
+-- Server.Node.Networking.cs



[FILE CONTENTS]
=== FILE: Program.cs ===
using Newtonsoft.Json;
using System.Net;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;

namespace server
{
    internal class Program
    {
        static void Main(string[] args)
        {
            ServerManager manager = new(5000);
            manager.Start();

            StartNode("127.0.0.1",
                      6000,
                      new Tuple<IPAddress, ushort>(IPAddress.Parse("127.0.0.1"), 5000));
            StartNode("127.0.0.1",
                      6001,
                      new Tuple<IPAddress, ushort>(IPAddress.Parse("127.0.0.1"), 5000));
            StartNode("127.0.0.1",
                      6002,
                      new Tuple<IPAddress, ushort>(IPAddress.Parse("127.0.0.1"), 5000));
            
            Console.ForegroundColor = ConsoleColor.DarkBlue;
            Console.WriteLine("""
                              ███████████████████████████████████████████████████
                              █Система запущена. Нажмите Enter для завершения...█
                              ███████████████████████████████████████████████████
                              """);
            Console.ResetColor();
            Console.ReadLine();
        }
        static void StartNode(string ipAddress, int port, Tuple<IPAddress, ushort> manager)
        {
            Task.Run(() =>
            {
                Node node = new Node(ipAddress, (ushort)port);
                node.Start(manager);
                //Console.WriteLine($"Узел запущен на {ipAddress}:{port}");
            });
        }
    }
}

---

=== FILE: Server.Blockchain.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace server
{
    internal class Blockchain
    {
        //not implemented yet
        private class Block
        {

        }

        public void ExportToFile(string filename)
        {
            throw new NotImplementedException();
        }
        public void ImportFromFile(string filename)
        {
            throw new NotImplementedException();
        }
        public bool CheckIntegrity(Blockchain blockchain)
        {
            throw new NotImplementedException();
        }
    }
}

---

=== FILE: Server.Manager.cs ===
using Newtonsoft.Json;
using System;
using System.Net;
using System.Net.Sockets;
using System.Security.Cryptography;
using System.Text;
using static user.Data;

namespace server
{
    internal class ServerManager
    {
        private TcpListener listener;
        private List<Node.NodeInfo> nodes;
        private readonly object nodeLock;
        private Dictionary<string /* data hash */, byte[] /* nodes where information about data is located */> dataLocations;
        public ServerManager(int port)
        {
            listener = new(IPAddress.Any, port);
            nodes = new();
            dataLocations = new();
            nodeLock = new();
        }

        #region networking
        public void Start()
        {
            listener.Start();
            Console.WriteLine($"Server is running on {listener.Server.LocalEndPoint.ToString()}");
            Task.Run(() => ListenForConnections());
        }
        private async Task ListenForConnections()
        {
            while (true)
            {
                TcpClient client = await listener.AcceptTcpClientAsync();
                _ = Task.Run(() => HandleConnections(client));
            }
        }
        private void HandleConnections(TcpClient client)
        {
            var settings = new JsonSerializerSettings();
            settings.Converters.Add(new IPAddressConverter());

            try 
            {
                using NetworkStream stream = client.GetStream();
                byte[] header = new byte[16];
                stream.ReadExactly(header, 0, 16);

                user.Data.Request request = user.Data.Request.FromByteArray(header);

                request.data = new byte[request.size];

                stream.ReadExactly(request.data);

                string command = Encoding.UTF8.GetString(request.type)
                    .TrimEnd(' ');

                switch (command)
                {
                    case "REGISTER":
                        if (request.data.Length > 0)
                        {
                            string json = Encoding.UTF8.GetString(request.data);
                            Node.NodeInfo nodeInfo = JsonConvert.DeserializeObject<Node.NodeInfo>(json, settings);
                            RegisterNode(nodeInfo);
                        }
                        break;

                    case "GETNODES":
                        if (request.data.Length >= 4)
                        {
                            int count = BitConverter.ToInt32(request.data, 0);
                            SendNodesToClient(stream, count);
                        }
                        break;
                    case "ALLNODES":
                        if (request.data.Length >= 4)
                        {
                            int count = BitConverter.ToInt32(request.data, 0);
                            SendALLNodesToClient(stream, count);
                        }
                        break;
                    case "UPDATE":
                        if (request.data.Length > 0)
                        {
                            string json = Encoding.UTF8.GetString(request.data);
                            Node.NodeInfo nodeInfo = JsonConvert.DeserializeObject<Node.NodeInfo>(json, settings);
                            UpdateNode(nodeInfo);
                        }
                        break;
                    case "GET":
                        stream.Write(new user.Data.Request("NODES", dataLocations[Convert.ToBase64String(request.data)]).ToByteArray());
                        break;
                    case "LOCATION":
                        UpdateLocations(request.data, stream);
                        break;
                    default:
                        stream.Write(new user.Data.Request("ERROR", Encoding.UTF8.GetBytes("Unknown command"))
                                        .ToByteArray());
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling client: {ex.Message}");
            }
            finally
            {
                client.Close();
            }
        }
        private void SendALLNodesToClient(NetworkStream stream, int count)
        {
            string json = Newtonsoft.Json.JsonConvert.SerializeObject(nodes.Select(n => new Tuple<string, ushort>(n.IP.ToString(), n.Port)));
            byte[] response = Encoding.UTF8.GetBytes(json);

            stream.Write(new user.Data.Request("NODES", response).ToByteArray());
        }
        private void SendNodesToClient(NetworkStream stream, int count)
        {
            List<Tuple<IPAddress, ushort>> selectedNodes;
            try
            {
                lock (nodeLock)
                {
                    selectedNodes = SelectOptimalNodes(
                        nodes
                        .Where(n => (DateTime.UtcNow - n.LastActive).TotalSeconds < 30)
                        .ToList(), count
                        );
                }
                
                string json = Newtonsoft.Json.JsonConvert.SerializeObject(selectedNodes.Select(n => new Tuple<string, ushort>(n.Item1.ToString(), n.Item2)));
                
                byte[] response = Encoding.UTF8.GetBytes(json);
                stream.Write(new user.Data.Request("NODES", response).ToByteArray());
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending nodes: {ex.Message}");
            }
        }
        #endregion
        #region work with nodes (field)
        private void UpdateNode(Node.NodeInfo nodeInfo)
        {
            lock (nodeLock)
            {
                Console.WriteLine($"Node {nodeInfo.NodeID} updated"); //!!! ONLY for debug !!!
                var existing = nodes.FirstOrDefault(n => n.NodeID == nodeInfo.NodeID);
                if (existing != null)
                    existing.LastActive = DateTime.UtcNow;
            }
        }
        private void RegisterNode(Node.NodeInfo nodeInfo)
        {
            if (!nodes.Any(n => n.NodeID == nodeInfo.NodeID))
            {
                lock (nodeLock)
                {
                    nodes.Add(nodeInfo);
                }
                Console.WriteLine($"Node {nodeInfo.NodeID} added");
            }
        }
        private List<Tuple<IPAddress, ushort>> SelectOptimalNodes(List<Node.NodeInfo> activeNodes, int count)
        {
            var random = new Random();
            return activeNodes
                .OrderBy(_ => random.Next())
                .Take(count)
                .Select(n => new Tuple<IPAddress, ushort>(n.IP, n.Port))
                .ToList();
        }




        #endregion
        private void UpdateLocations(byte[] data, NetworkStream stream)
        {
            if (data.Length < SHA256.HashSizeInBytes)
            {
                throw new ArgumentException("Invalid data format");
            }
            byte[] hash = new byte[SHA256.HashSizeInBytes];
            Buffer.BlockCopy(data, 0, hash, 0, hash.Length);
            var nodeInfo = data.Skip(hash.Length).ToArray();

            bool added = dataLocations.TryAdd(Convert.ToBase64String(hash), nodeInfo);

            stream.Write(new Request(added ? "SUCCESS" : "ERROR", null).ToByteArray());
        }
    }
}

---

=== FILE: Server.Node.cs ===
using System.Net;

namespace server
{
    internal partial class Node
    {
        public NodeInfo nodeInfo;
        private Storage storage;
        public Node(string ipAddress, ushort port)
        {
            nodeInfo = new();
            nodeInfo.NodeID = Guid.NewGuid();
            nodeInfo.IP = IPAddress.Parse(ipAddress);
            nodeInfo.Port = port;
            nodeInfo.LastActive = DateTime.UtcNow;
            storage = new();
        }
    }
    #region NodeInfo
    internal partial class Node
    {
        public class NodeInfo
        {
            public Guid NodeID { get; set; }
            public IPAddress IP { get; set; }
            public ushort Port { get; set; }
            public DateTime LastActive { get; set; }
        }
    }
    #endregion
    #region Storage
    internal partial class Node
    {
        class Storage
        {
            private Dictionary<string /*hash*/, byte[]/*data*/> data = new();

            public void Add(byte[] dataPart)
            {
                string hashKey = Convert.ToBase64String(user.Data.ComputeHash(dataPart));
                if (!data.ContainsKey(hashKey))
                {
                    data.Add(hashKey, dataPart);
                }
            }
            public byte[] Get(byte[] partHash)
            {
                return data.TryGetValue(
                    Convert.ToBase64String(partHash), out var d) ? d : null;
            }
            public bool Delete(byte[] partHash)
            {
                return data.Remove(Convert.ToBase64String(partHash));
            }
        }
    }
    #endregion
}

---

=== FILE: Server.Node.Networking.cs ===
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using static user.Data;

namespace server
{
    internal partial class Node
    {
        private TcpListener listener;

        public void Start(Tuple<IPAddress, ushort> manager)
        {
            Console.WriteLine($"Node {nodeInfo.NodeID} is running on {nodeInfo.IP}:{nodeInfo.Port}");
            listener = new(nodeInfo.IP, nodeInfo.Port);
            RegisterNodeWithServer(manager);

            listener.Start();
            Task.Run(() => ListenForDataConnections());
            Task.Run(() => SendUpdates(manager));
        }
        private async Task ListenForDataConnections()
        {
            while (true)
            {
                var client = await listener.AcceptTcpClientAsync();
                _ = Task.Run(() => HandleDataClient(client));
            }
        }
        private void HandleDataClient(TcpClient client)
        {
            try
            {
                using NetworkStream stream = client.GetStream();
                byte[] header = new byte[16];
                stream.ReadExactly(header, 0, 16);

                user.Data.Request request = user.Data.Request.FromByteArray(header);

                request.data = new byte[request.size];

                stream.ReadExactly(request.data);

                string command = Encoding.UTF8.GetString(request.type)
                    .TrimEnd(' ');

                switch (command)
                {
                    case "PUT":
                        PutData(stream, request.data);
                        break;
                    case "GET":
                        GetData(stream, request.data);
                        break;
                    case "DELETE":
                        DeleteData(stream, request.data);
                        break;
                    default:
                        stream.Write(new user.Data.Request("ERROR", Encoding.UTF8.GetBytes("Unknown command\n"))
                            .ToByteArray());
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling client: {ex.Message}");
            }
            finally
            {
                client.Close();
            }
        }
        private void PutData(NetworkStream stream, byte[] data)
        {
            try
            {
                storage.Add(data);
                stream.Write(new user.Data.Request("SUCCESS", null)
                                .ToByteArray());
            }
            catch (Exception ex)
            {
                PrintError(stream, ex);
            }
        }
        private void GetData(NetworkStream stream, byte[] hash)
        {
            try
            {
                stream.Write(new user.Data.Request("DATA", storage.Get(hash))
                                .ToByteArray());
            }
            catch (Exception ex)
            {
                PrintError(stream, ex);
            }
        }
        private void DeleteData(NetworkStream stream, byte[] hash)
        {
            try
            {
                storage.Delete(hash);
                stream.Write(new user.Data.Request("SUCCESS", null)
                                .ToByteArray());
            }
            catch (Exception ex)
            {
                PrintError(stream, ex);
            }
        }
        private void RegisterNodeWithServer(Tuple<IPAddress, ushort> manager)
        {
            var settings = new JsonSerializerSettings();
            settings.Converters.Add(new user.Data.IPAddressConverter());

            using TcpClient client = new();
            client.Connect(manager.Item1, manager.Item2);

            using NetworkStream stream = client.GetStream();
            
            var nodeJson = JsonConvert.SerializeObject(nodeInfo, settings);
            var request = new user.Data.Request("REGISTER", Encoding.UTF8.GetBytes(nodeJson));

            stream.Write(request.ToByteArray());
        }
        private async Task SendUpdates(Tuple<IPAddress, ushort> manager)
        {
            var settings = new JsonSerializerSettings();
            settings.Converters.Add(new IPAddressConverter());
            while (true)
            {
                await Task.Delay(TimeSpan.FromSeconds(15));
                
                try
                {
                    nodeInfo.LastActive = DateTime.UtcNow;

                    string json = JsonConvert.SerializeObject(nodeInfo, settings);
                    byte[] data = Encoding.UTF8.GetBytes(json);

                    using var client = new TcpClient();
                    await client.ConnectAsync(manager.Item1, manager.Item2);
                    using var stream = client.GetStream();

                    var request = new Request("UPDATE", data);
                    var requestBytes = request.ToByteArray();
                    //Console.WriteLine("Sending UPDATE request");
                    await stream.WriteAsync(requestBytes, 0, requestBytes.Length);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Ошибка отправки UPDATE: {ex.Message}");
                }
            }
        }
        private static void PrintError(NetworkStream stream, Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            stream.Write(new Request("ERROR", Encoding.UTF8.GetBytes(ex.Message)).ToByteArray());
        }
    }
}

---

[DIRECTORY TREE]
+-- Data.Base.cs
+-- Data.Cryptography.cs
+-- Data.Networking.cs
+-- Data.Part.cs
+-- Program.cs



[FILE CONTENTS]
=== FILE: Data.Base.cs ===
namespace user
{
    public partial class Data
    {
        public class DataInfo
        {
            public DateTime CreationTime { get; set; }
            public DateTime UpdateTime { get; set; }
            public byte[] DataHash { get; set; }
        }

        private byte[] EncryptedData { get; set; }
        private DataInfo dataInfo;

        public Data(byte[] encryptedData)
        {
            dataInfo = new();
            EncryptedData = encryptedData;
            dataInfo.DataHash = ComputeHash(encryptedData);
            dataInfo.CreationTime = DateTime.UtcNow;
            dataInfo.UpdateTime = DateTime.UtcNow;
        }
        public void UpdateData(byte[] encryptedData)
        {
            EncryptedData = encryptedData;
            dataInfo.DataHash = ComputeHash(encryptedData);
            dataInfo.UpdateTime = DateTime.UtcNow;
        }
        public bool VerifyData(byte[] encryptedData)
        {
            byte[] hash = ComputeHash(encryptedData);
            return dataInfo.DataHash.SequenceEqual(hash);
        }
    }
}

---

=== FILE: Data.Cryptography.cs ===
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

namespace user
{
    public partial class Data
    {
        public static byte[] ComputeHash(byte[] data)
        {
            byte[] hashBytes = SHA256.HashData(data);
            return hashBytes;
        }

        public static byte[] EncryptData(byte[] data, byte[] key)
        {
            using Aes aes = Aes.Create();
            //iv - инициализирующий вектор, случайное значение, нужное, чтобы
            //две одинаковые пары данных и пароля давали разные зашифрованные значения
            aes.Key = ComputeHash(key);
            byte[] iv = aes.IV;

            using MemoryStream memoryStream = new();
            memoryStream.Write(iv, 0, iv.Length);

            using (CryptoStream cryptoStream = new(
                memoryStream,
                aes.CreateEncryptor(),
                CryptoStreamMode.Write))
            {
                cryptoStream.Write(data, 0, data.Length);
            }
            return memoryStream.ToArray();
        }

        public static byte[] DecryptData(byte[] encryptedData, byte[] key)
        {
            using Aes aes = Aes.Create();
            byte[] iv = new byte[aes.IV.Length];

            using MemoryStream memoryStream = new(encryptedData);
            memoryStream.Read(iv, 0, iv.Length);

            using CryptoStream cryptoStream = new(
                memoryStream,
                aes.CreateDecryptor(ComputeHash(key), iv),
                CryptoStreamMode.Read);
            
            using MemoryStream decryptedStream = new();
            cryptoStream.CopyTo(decryptedStream);
            return decryptedStream.ToArray();
        }

        public static byte[] EncryptKey(byte[] key, byte[] publicKey)
        {
            using RSACryptoServiceProvider rsa = new();
            rsa.ImportRSAPublicKey(publicKey, out _);
            return rsa.Encrypt(key, RSAEncryptionPadding.Pkcs1);
        }
        public static byte[] DecryptKey(byte[] encryptedKey, byte[] PrivateKey)
        {
            using RSACryptoServiceProvider rsa = new();
            rsa.ImportPkcs8PrivateKey(PrivateKey, out _);
            return rsa.Decrypt(encryptedKey, RSAEncryptionPadding.Pkcs1);
        }
    }
}

---

=== FILE: Data.Networking.cs ===

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Text;
using System.Xml.Linq;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static user.Data;

namespace user
{
    public partial class Data
    {
        public List<Tuple<IPAddress[] /* node id */, ushort /* node port */, byte[] /* part hash */>> dataLocation; 
        public bool SendData(byte[] data, Tuple<IPAddress, ushort> manager, int partsCount = 3, int nodesPerPart = 3)
        {
            int nodesCount = nodesPerPart * (partsCount + 1); // +1 для метаданных
            List<Tuple<byte[], Tuple<IPAddress, ushort>[]>> dataLocations = new();
            
            Tuple<IPAddress, ushort>[] nodes = GetNodes(nodesCount, manager);
            if (nodes.Length < nodesCount)
            {
                throw new Exception("Not enough nodes available");
            }
            
            DataPart[] dataParts = DataPart.SplitData(data, partsCount);

            int success = 0;

            for (int i = 0; i < partsCount; ++i)
            {
                Tuple<IPAddress, ushort>[] nodesSend = nodes.Skip(i * nodesPerPart)
                    .Take(nodesPerPart)
                    .ToArray();
                success += SendToNodes(dataParts[i].ToByteArray(), 
                    nodesSend) ? 1 : 0;
                dataLocations.Add(new Tuple<byte[], Tuple<IPAddress, ushort>[]>
                    (ComputeHash(dataParts[i].ToByteArray()), nodesSend));
            }

            var byteLocations = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(dataLocations
                .Select(x => new Tuple<byte[], Tuple<string, ushort>[]>(x.Item1, 
                    x.Item2.Select(n => new Tuple<string, ushort>(n.Item1.ToString(), n.Item2)).ToArray())
                )));

            success += SendToNodes(byteLocations, nodes.Skip(nodesCount - nodesPerPart).ToArray()) ? 1 : 0;
            success += SendLocation(manager, byteLocations) ? 1 : 0;
            return success == partsCount + 1 + 1;
        }
        private bool SendToNodes(byte[] data, Tuple<IPAddress, ushort>[] nodes)
        {
            try
            {
                Request request = new("PUT", data);
                var requestBytes = request.ToByteArray();
                
                foreach (var node in nodes)
                {
                    using TcpClient client = new TcpClient();
                    client.Connect(node.Item1, node.Item2);

                    using NetworkStream stream = client.GetStream();

                    stream.Write(requestBytes);

                    byte[] header = new byte[16];
                    stream.ReadExactly(header);

                    Request response = Request.FromByteArray(header);
                    
                    stream.ReadExactly(response.data);

                    string answer = Encoding.UTF8.GetString(response.type).TrimEnd(' ');

                    if (answer == "SUCCESS")
                    {
                        Console.WriteLine($"Data successfully sent to {node.Item1}:{node.Item2}");
                    }
                    else
                    {   
                        Console.WriteLine($"Error at {node.Item1}:{node.Item2}\n\t{Encoding.UTF8.GetString(response.data)}. \n Node answer: {answer}");
                        return false;
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
            return false;
        }
        private bool SendLocation(Tuple<IPAddress, ushort> manager, byte[] data)
        {
            try
            {
                Request request = new("LOCATION", data);
                var requestBytes = request.ToByteArray();

                using TcpClient client = new TcpClient();
                client.Connect(manager.Item1, manager.Item2);

                using NetworkStream stream = client.GetStream();

                stream.Write(requestBytes);

                byte[] header = new byte[16];
                stream.ReadExactly(header);

                Request response = Request.FromByteArray(header);

                stream.ReadExactly(response.data);

                string answer = Encoding.UTF8.GetString(response.type).TrimEnd(' ');

                if (answer == "SUCCESS")
                {
                    Console.WriteLine($"Data successfully sent to {manager.Item1}:{manager.Item2}");
                }
                else
                {
                    Console.WriteLine($"Error at {manager.Item1}:{manager.Item2}\tNode answer: {answer}");
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
            return false;
        }
        public byte[] GetData(Tuple<IPAddress, ushort> manager, byte[] hash)
        {
            var settings = new JsonSerializerSettings();
            settings.Converters.Add(new IPAddressConverter());
            try
            {
                Request request = new("GET", hash);
                var requestBytes = request.ToByteArray();

                using TcpClient client = new TcpClient();
                client.Connect(manager.Item1, manager.Item2);

                using NetworkStream stream = client.GetStream();

                stream.Write(requestBytes);

                byte[] header = new byte[16];
                stream.ReadExactly(header);

                Request response = Request.FromByteArray(header);

                stream.ReadExactly(response.data);

                string answer = Encoding.UTF8.GetString(response.type).TrimEnd(' ');

                if (answer != "NODES")
                {
                    Console.WriteLine($"Error at {manager.Item1}:{manager.Item2}\tNode answer: {answer}");
                    return null;
                }

                List<Tuple<byte[], Tuple<IPAddress, ushort>[]>> dataLocations = new();
                
                dataLocations = JsonConvert.DeserializeObject<List<Tuple<byte[], Tuple<IPAddress, ushort>[]>>>(Encoding.UTF8.GetString(response.data), settings)
                                           .ToList();

                var dataParts = new DataPart[dataLocations.Count];

                foreach (var location in dataLocations)
                {
                    var dataPart = GetPart(location.Item1, location.Item2);
                    dataParts[dataPart.partNum] = dataPart;
                }

                byte[] output = new byte[dataParts.Sum(x => x.dataPart.Length)];
                var bytesRead = 0;
                foreach (var part in dataParts)
                {
                    Buffer.BlockCopy(part.dataPart, 0, output, bytesRead, part.dataPart.Length);
                    bytesRead += part.dataPart.Length;
                }

                return output;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
            return null;
        }
        private DataPart GetPart(byte[] partHash, Tuple<IPAddress, ushort>[] nodes)
        {
            try
            {
                Request request = new("GET", partHash);

                foreach (var node in nodes)
                {
                    using TcpClient client = new TcpClient();
                    client.Connect(node.Item1, node.Item2);
                    using NetworkStream stream = client.GetStream();

                    byte[] header = new byte[16];

                    stream.ReadExactly(header);
                    Request response = Request.FromByteArray(header);
                    stream.ReadExactly(response.data);

                    if (Encoding.UTF8.GetString(response.type).TrimEnd(' ') != "DATA")
                        throw new Exception("Unexpected response type");

                    DataPart dataPart = DataPart.FromByteArray(response.data);
                    if (ComputeHash(dataPart.dataPart).SequenceEqual(dataPart.partHash))
                    {
                        return dataPart;
                    }
                    else
                    {
                        Console.WriteLine($"Data corruption detected at node {node.Item1.ToString()}:{node.Item2}");
                    }
                }
                throw new Exception("No valid nodes found");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
            return null;
        }
        private Tuple<IPAddress, ushort>[] GetNodes(int count, Tuple<IPAddress, ushort> manager)
        {
            var settings = new JsonSerializerSettings();
            settings.Converters.Add(new IPAddressConverter());

            try
            {
                Request request = new("GETNODES", BitConverter.GetBytes(count));

                using TcpClient client = new TcpClient();
                client.Connect(manager.Item1, manager.Item2);
                using NetworkStream stream = client.GetStream();

                stream.Write(request.ToByteArray());

                byte[] header = new byte[16];

                stream.ReadExactly(header);
                Request response = Request.FromByteArray(header);
                stream.ReadExactly(response.data);

                string json = Encoding.UTF8.GetString(response.data);
                //Tuple<IPAddress, ushort>[] nodes = JsonConvert.DeserializeObject<List<Tuple<string, ushort>>>(json)
                //                                              .Select(n => new Tuple<IPAddress, ushort>(IPAddress.Parse(n.Item1), n.Item2))
                //                                              .ToArray();
                Tuple<IPAddress, ushort>[] nodes = JsonConvert.DeserializeObject<List<Tuple<IPAddress, ushort>>>(json, settings).ToArray();

                return nodes;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                return null;
            }
        }
        public void PrintAllAvailableNodes(Tuple<IPAddress, ushort> manager)
        {
            try
            {
                Request request = new("ALLNODES", null);

                using TcpClient client = new TcpClient();
                client.Connect(manager.Item1, manager.Item2);
                using NetworkStream stream = client.GetStream();

                stream.Write(request.ToByteArray());

                byte[] header = new byte[16];

                stream.ReadExactly(header);
                Request response = Request.FromByteArray(header);
                stream.ReadExactly(response.data);

                string json = Encoding.UTF8.GetString(response.data);
                Tuple<IPAddress, ushort>[] nodes = JsonConvert.DeserializeObject<List<Tuple<string, ushort>>>(json)
                                                              .Select(n => new Tuple<IPAddress, ushort>(IPAddress.Parse(n.Item1), n.Item2))
                                                              .ToArray();

                foreach (var node in nodes)
                {
                    Console.WriteLine($"node {node.Item1.ToString}:{node.Item2}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
        public class Request
        {
            public byte[]   type; //8 байт
            public long     size; //8 байт размер данных
            public byte[]   data; //данные
            public Request()
            {
                type = new byte[8];
                size = 0;
                data = Array.Empty<byte>();
            }
            public Request(string typeStr, byte[]? data)
                : this()
            {
                Array.Copy(Encoding.UTF8.GetBytes(typeStr.PadRight(8, ' ')), this.type, 8);
                this.data = data ?? Array.Empty<byte>();
                this.size = this.data.Length;
            }
            public byte[] ToByteArray()
            {
                byte[] result = new byte[16 + (data?.Length ?? 0)];
                Buffer.BlockCopy(type, 0, result, 0, 8);
                Buffer.BlockCopy(BitConverter.GetBytes(size), 0, result, 8, 8);
                if (data != null)
                    Buffer.BlockCopy(data, 0, result, 16, data.Length);
                return result;
            }
            public static Request FromByteArray(byte[] buffer)
            {
                if (buffer == null || buffer.Length < 16)
                    throw new ArgumentException("Invalid buffer length");

                Request request = new Request();

                Buffer.BlockCopy(buffer, 0, request.type, 0, 8);

                request.size = BitConverter.ToInt64(buffer, 8);

                if (request.size > 0)
                {
                    request.data = new byte[request.size];
                    if (buffer.Length == 16 + request.size)
                    {
                        Buffer.BlockCopy(buffer, 16, request.data, 0, request.data.Length);
                    }
                }
                else
                {
                    request.data = Array.Empty<byte>();
                }

                return request;
            }
            public void ReplaceData(byte[]? data)
            {
                this.data = data ?? Array.Empty<byte>();
                this.size = this.data.Length;
            }
        }
        public class IPAddressConverter : JsonConverter<IPAddress>
        {
            public override void WriteJson(JsonWriter writer, IPAddress value, JsonSerializer serializer)
            {
                writer.WriteValue(value.ToString());
            }

            public override IPAddress ReadJson(JsonReader reader, Type objectType, IPAddress existingValue, bool hasExistingValue, JsonSerializer serializer)
            {
                JToken token = JToken.Load(reader);
                return IPAddress.Parse(token.Value<string>());
            }
        }
    }
}

---

=== FILE: Data.Part.cs ===
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using static user.Data;

namespace user
{
    public partial class Data
    {
        public class DataPart
        {
            public byte[]   dataHash;
            public byte[]   partHash;
            public int      partNum;
            public byte[]   dataPart;
            static public DataPart[] SplitData(byte[] data, int count)
            {
                DataPart[] parts = new DataPart[count];
                int partSize = (int)Math.Ceiling((double)data.Length / count);

                for (int i = 0; i < count; i++)
                {
                    parts[i] = new DataPart();

                    int offset = i * partSize;
                    int length = Math.Min(partSize, data.Length - offset);

                    parts[i].dataPart = new byte[length];
                    Buffer.BlockCopy(data, offset, parts[i].dataPart, 0, length);

                    parts[i].dataHash = ComputeHash(data);
                    parts[i].partHash = ComputeHash(parts[i].dataPart);
                    parts[i].partNum = i;
                }

                return parts;
            }

            public byte[] ToByteArray()
            {
                const int hashSize = SHA256.HashSizeInBytes;
                byte[] combined = new byte[hashSize * 2 + dataPart.Length + sizeof(int)];
                Buffer.BlockCopy(dataHash, 0, combined, 0, hashSize);
                Buffer.BlockCopy(partHash, 0, combined, hashSize, hashSize);
                Buffer.BlockCopy(BitConverter.GetBytes(partNum), 0, combined, hashSize * 2, sizeof(int));
                Buffer.BlockCopy(dataPart, 0, combined, hashSize * 2 + sizeof(int), dataPart.Length);
                return combined;
            }

            public static DataPart FromByteArray(byte[] data)
            {
                const int hashSize = SHA256.HashSizeInBytes;

                DataPart part = new DataPart();
                part.dataHash = new byte[hashSize];
                part.partHash = new byte[hashSize];
                part.dataPart = new byte[data.Length - hashSize * 2];
                Buffer.BlockCopy(data, 0, part.dataHash, 0, hashSize);
                Buffer.BlockCopy(data, hashSize, part.partHash, 0, hashSize);
                part.partNum = BitConverter.ToInt32(data, hashSize * 2);
                Buffer.BlockCopy(data, hashSize * 2 + sizeof(int), part.dataPart, 0, part.dataPart.Length);
                return part;
            }
        }
    }
}

---

=== FILE: Program.cs ===
using System.Security.Cryptography;
using System.Text;

namespace user
{
    internal class Program
    {
        static void Main(string[] args)
        {
            byte[] str = Encoding.UTF8.GetBytes("data");
            byte[] key = Data.ComputeHash(Encoding.UTF8.GetBytes("key"));
            Console.WriteLine($"Initial data:               {Encoding.UTF8.GetString(str)}");
            Console.WriteLine($"Initial data    (base64):   {Convert.ToBase64String(str)}");
            

            byte[] encryptedData = Data.EncryptData(str, key);
            Console.WriteLine($"Encrypted data  (base64):   {Convert.ToBase64String(encryptedData)}");

            byte[] decryptedData = Data.DecryptData(encryptedData, key);
            Console.WriteLine($"Decrypted data:             {Encoding.UTF8.GetString(decryptedData)}");

            Console.WriteLine();

            using var rsa = new RSACryptoServiceProvider(2048);

            byte[] publicKey = rsa.ExportRSAPublicKey();
            byte[] privateKey = rsa.ExportPkcs8PrivateKey();

            var encryptedKey = Data.EncryptKey(key, publicKey);
            var decryptedKey = Data.DecryptKey(encryptedKey, privateKey);

            Console.WriteLine($"Initial key     (base64):   {Convert.ToBase64String(key)}");
            Console.WriteLine($"Encrypted key   (base64):   {Convert.ToBase64String(encryptedKey)}");
            Console.WriteLine($"Decrypted key   (base64):   {Convert.ToBase64String(decryptedKey)}");
            
            Console.WriteLine("------------------");
        }
    }
}

---

